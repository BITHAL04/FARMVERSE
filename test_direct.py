"""
Direct test of FarmVerse API functionality
"""

from fastapi.testclient import TestClient
import sys
import os

# Add the app directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from main_simple import app

def test_farmverse_api():
    """Test FarmVerse API using FastAPI TestClient"""
    
    print("Testing FarmVerse Agriculture Chatbot API (Direct)")
    print("=" * 60)
    
    # Create test client
    client = TestClient(app)
    
    try:
        # Test 1: Health check
        print("1. Testing Health Check:")
        response = client.get("/health")
        print(f"   Status Code: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Health check passed")
            print(f"   Response: {response.json()}")
        else:
            print("   ‚ùå Health check failed")
        
        print("\n" + "-" * 40)
        
        # Test 2: Root endpoint
        print("2. Testing Root Endpoint:")
        response = client.get("/")
        print(f"   Status Code: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Root endpoint working")
            print(f"   Response: {response.json()}")
        
        print("\n" + "-" * 40)
        
        # Test 3: Text chat - English
        print("3. Testing English Text Chat:")
        payload = {
            "message": "What is the best fertilizer for wheat?",
            "user_id": "test_user",
            "language": "en"
        }
        
        response = client.post("/chat/text", json=payload)
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ English chat working")
            result = response.json()
            print(f"   Question: {payload['message']}")
            print(f"   Answer: {result.get('response', 'No response')}")
            print(f"   Language: {result.get('detected_language', 'Unknown')}")
        else:
            print("   ‚ùå English chat failed")
            print(f"   Error: {response.text}")
        
        print("\n" + "-" * 40)
        
        # Test 4: Text chat - Hindi
        print("4. Testing Hindi Text Chat:")
        payload = {
            "message": "‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•å‡§® ‡§∏‡§æ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à?",
            "user_id": "test_user",
            "language": "hi"
        }
        
        response = client.post("/chat/text", json=payload)
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ Hindi chat working")
            result = response.json()
            print(f"   ‡§™‡•ç‡§∞‡§∂‡•ç‡§®: {payload['message']}")
            print(f"   ‡§â‡§§‡•ç‡§§‡§∞: {result.get('response', '‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§π‡•Ä‡§Ç')}")
            print(f"   ‡§≠‡§æ‡§∑‡§æ: {result.get('detected_language', '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§')}")
        else:
            print("   ‚ùå Hindi chat failed")
            print(f"   Error: {response.text}")
        
        print("\n" + "-" * 40)
        
        # Test 5: Languages endpoint
        print("5. Testing Languages Endpoint:")
        response = client.get("/languages")
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ Languages endpoint working")
            result = response.json()
            print(f"   Supported Languages: {result.get('supported_languages', [])}")
            print(f"   Language Names: {result.get('language_names', {})}")
        
        print("\n" + "-" * 40)
        
        # Test 6: Various agriculture topics
        print("6. Testing Agriculture Knowledge:")
        
        test_cases = [
            ("How to control pests in tomato?", "en"),
            ("What diseases affect rice?", "en"),
            ("‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡§æ ‡§á‡§≤‡§æ‡§ú?", "hi"),
            ("‡§ö‡§æ‡§µ‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?", "hi"),
            ("Irrigation methods for wheat", "en"),
            ("‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?", "hi")
        ]
        
        for question, lang in test_cases:
            payload = {"message": question, "user_id": "test_farmer", "language": lang}
            response = client.post("/chat/text", json=payload)
            
            if response.status_code == 200:
                result = response.json()
                lang_name = "English" if lang == "en" else "Hindi"
                print(f"\n   ‚úÖ {lang_name} - {question}")
                print(f"      Response: {result.get('response', 'No response')[:120]}...")
                print(f"      Detected: {result.get('detected_language', 'Unknown')}")
            else:
                print(f"\n   ‚ùå Failed - {question}")
        
        print("\n" + "=" * 60)
        print("üéâ All tests completed successfully!")
        print("\nüìã Summary:")
        print("   ‚úÖ Basic API functionality working")
        print("   ‚úÖ English language support working")
        print("   ‚úÖ Hindi language support working")
        print("   ‚úÖ Agriculture knowledge base responding")
        print("   ‚úÖ Language detection working")
        
        print("\nüöÄ Next Steps for Full Features:")
        print("   1. Get OpenAI API key and add to .env file")
        print("   2. Set up Google Cloud credentials for voice/translation")
        print("   3. Install full requirements: pip install -r requirements.txt")
        print("   4. Run full version: uvicorn main:app --reload")
        print("   5. Test voice and image endpoints")
        
    except Exception as e:
        print(f"‚ùå Test suite failed: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_farmverse_api()
